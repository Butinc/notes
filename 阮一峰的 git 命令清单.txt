阮一峰的网络日志 » 首页 » 档案

搜索 
上一篇：测试框架 Mocha 
下一篇：有没有安全的工作？  
分类： 开发者手册
常用 Git 命令清单
作者： 阮一峰
日期： 2015年12月 9日
我每天使用 Git ，但是很多命令记不住。
一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。

下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。
Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库
一、新建代码库

# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
二、配置
Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。

# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
三、增加/删除文件

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
四、代码提交

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
五、分支

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
六、标签

# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
七、查看信息

# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
八、远程同步

# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
九、撤销

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
十、其他

# 生成一个可供发布的压缩包
$ git archive
（完）
文档信息
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
发表日期： 2015年12月 9日
更多内容： 档案 » 开发者手册
博客文集：《前方的路》，《未来世界的幸存者》
社交媒体： twitter， weibo
Feed订阅： 


相关文章
2017.06.22: HTML 自定义元素教程
组件是 Web 开发的方向，现在的热点是 JavaScript 组件，但是 HTML 组件未来可能更有希望。
2017.06.15: 树莓派新手入门教程
树莓派（Raspberry Pi）是学习计算机知识、架设服务器的好工具，价格低廉，可玩性高。
2017.05.27: Server-Sent Events 教程
服务器向浏览器推送信息，除了 WebSocket，还有一种方法：Server-Sent Events（以下简称 SSE）。本文介绍它的用法。
2017.05.15: WebSocket 教程
WebSocket 是一种网络通信协议，很多高级功能都需要它。
广告（购买广告位）

FunDebug 倚天剑

留言（53条）
strider 说：
常用的也是你提到的这几个，其他的每次都要现查。
2015年12月 9日 10:08 | # | 引用
JustYY.com 小赖子的英国生活和资讯。 说：
多谢 很实用
2015年12月 9日 10:25 | # | 引用
yanhaijing 说：
http://yanhaijing.com/git/2014/11/01/my-git-note 类似文章，但没有阮老师写的清晰
2015年12月 9日 10:28 | # | 引用
Tony 说：
想不通那些说 git 超级简单的人, 是一种什么心理!
2015年12月 9日 10:32 | # | 引用
hmy 说：
git 的实现原理很简单，相对其他版本管理系统
2015年12月 9日 10:33 | # | 引用
笔墨 说：
git --orphan gh-pages 也很重要，用于创建一个全新的分支，不包含原分支的提交历史，Gihthub项目主页分支用这个。
2015年12月 9日 11:20 | # | 引用
SpicyCat 说：
没有git bisec就算了，连git rebase也没有？git rebase算是比较常用的了。
看log建议用gitk，不用记那么多参数。
git alias 也比较有用。
但是常用的就那么几个，不常用的还是要现查手册。
感觉阮老师这一篇略水。
2015年12月 9日 12:09 | # | 引用
笔墨 说：
引用笔墨的发言：
git --orphan gh-pages 也很重要，用于创建一个全新的分支，不包含原分支的提交历史，Gihthub项目主页分支用这个。
错了，是 git checkout --orphan gh-pages
2015年12月 9日 12:24 | # | 引用
Eich 说：
显示两次差异的中间不是两个点的吗？
2015年12月 9日 12:51 | # | 引用
阮一峰 说：
@Eich
三个点比两个点包括更多的commit。
http://stackoverflow.com/questions/462974/what-are-the-differences-between-double-dot-and-triple-dot-in-git-com#answer-24186641
2015年12月 9日 13:37 | # | 引用
Emily 说：
噗，不太会用命令行，一直用 sourceTree
2015年12月 9日 14:10 | # | 引用
石樱灯笼 说：
求问开头那个图是用什么软件画的？
2015年12月 9日 17:02 | # | 引用
az 说：
git pull
git add .
git commit -m 'well'
git push origin 
2015年12月 9日 21:08 | # | 引用
Mark 说：
阮老師
我可以轉譯成繁中轉貼到我的blog嗎？
2015年12月10日 13:43 | # | 引用
Ivan 说：
最近阮兄一直在钻研技术，什么时候再写写人文社科类的文章
2015年12月10日 13:50 | # | 引用
阮一峰 说：
@Mark：非常欢迎啊。
@Ivan：只要能抽出时间，就会写。
2015年12月10日 15:39 | # | 引用
zhangbo9716 说：
阮老师最近写的都是技术的文章啊。很少思想类的文章了。
2015年12月10日 19:04 | # | 引用
ky 说：
不知道阮老师可否出个typescript相关的教程，网上找不到好的啊。。
2015年12月11日 03:23 | # | 引用
phping 说：
引用Emily的发言：
噗，不太会用命令行，一直用 sourceTree
我也是，先前是使用的命令行操作，现在在用sourcetree.
2015年12月11日 14:29 | # | 引用
doingnothing 说：
引用Tony的发言：
想不通那些说 git 超级简单的人, 是一种什么心理!
引用Tony的发言：
想不通那些说 git 超级简单的人, 是一种什么心理!
感觉就是一种推销的说辞罢了。这种说辞，让一些人觉得随便学下就好了，导致实际上经常踩到坑。
2015年12月13日 00:11 | # | 引用
coder 说：
关注很长时间了，留个名
2015年12月14日 15:47 | # | 引用
gostar 说：
基本都用到过。 讲的蛮好的`
2015年12月14日 18:04 | # | 引用
x 说：
我们学校的老师呀，虽然没教过我。（本人计算机专业，当时 闻其名未见其人），话说现在还在计算机行业，也在写着 前端JavaScript 。搜索 tail call optimization 的时搜索到的。呵呵。自己水平还是比较菜
2015年12月15日 09:47 | # | 引用
MMY 说：
阮老师，怎么在github里面加入代码演示呢？
2015年12月16日 15:14 | # | 引用
ruanjf 说：
引用SpicyCat的发言：
没有git bisec就算了，连git rebase也没有？git rebase算是比较常用的了。
看log建议用gitk，不用记那么多参数。
git alias 也比较有用。
但是常用的就那么几个，不常用的还是要现查手册。
感觉阮老师这一篇略水。
fetch + rebase用得最多了
2015年12月17日 10:15 | # | 引用
yager 说：
阮老师，刚才开发中用到tag的两个命令：
删除本地tag:
git tag -d tagName
删除远程tag:
git push origin :refs/tags/tagName
希望能做个补充。
2015年12月22日 19:50 | # | 引用
阮一峰 说：
@yager：
谢谢补充，已经添加。
欢迎大家继续补充。
2015年12月23日 09:01 | # | 引用
AnnabellChan 说：
其实只要记住对应的英文就会方便很多
比如 git checkout -b，b其实是browse的abbr.
git branch -r, r -> remote
git branch -a, a -> all
git config -l, l -> list
git commit -m, m -> message
2015年12月23日 17:05 | # | 引用
Yan Xiaoxue 说：
您好，您博客的这个评论是怎么做的？
我刚开始用jekyll。
2015年12月24日 13:28 | # | 引用
汪卫卫 说：
阮老师，我可以转载在我的博客里吗？方便查用。
2015年12月24日 19:47 | # | 引用
大大大，大志 说：
引用Emily的发言：
噗，不太会用命令行，一直用 sourceTree
还是IDE集成的比较好，比如用webstrom中的git~ 然后结合前者中的terminal[终端面板]一起使用。
2015年12月30日 14:57 | # | 引用
李欣羿 说：
看过您的很多技术网站，受益颇丰。感谢有你。。
2016年1月 4日 16:59 | # | 引用
Jeremy Lu 说：
git stash 很有用，把改变过的篇码先搁置。何不加上呢？
2016年1月 5日 01:30 | # | 引用
yaoelvon 说：
写的不错
2016年1月 6日 22:44 | # | 引用
aiddroid 说：
引用Jeremy Lu的发言：
git stash 很有用，把改变过的篇码先搁置。何不加上呢？
+1，stash 必须上
2016年1月22日 17:00 | # | 引用
杨健 说：
$ git checkout [commit] [file] 是恢复指定文件到工作区和暂存区而不仅仅是工作区
2016年1月29日 14:36 | # | 引用
杨健 说：
git checkout 内容会让暂存区和工作区同步更新到某个commit。
且
"""
# 恢复上一个commit的所有文件到工作区
$ git checkout .
"""
有误，git checkout .并不是恢复上一个commit的所有文件到工作区，而是使得当前工作区内容恢复到当前暂存区内容
2016年1月29日 14:43 | # | 引用
阮一峰 说：
@杨健：
谢谢指出，已经更正。
2016年1月30日 00:05 | # | 引用
davidtutu 说：
写的很好很详细
虽然还不是很熟悉但有一种不明觉厉的感觉,谢谢老师了!
2016年4月 1日 00:44 | # | 引用
小嶙地 说：
git log -5 --pretty --oneline。在我这个版本上执行报错。git版本2.5.4.
git log --pretty --oneline -5这种方式正确。
2016年5月 8日 21:06 | # | 引用
シェしあたたかい 说：
git branch -D 只能删除本地分支
而git branch -d -r 可以删除本地与远程的联系
但是不知道有没有什么命令可以同时删除这两个呢？
2016年6月15日 14:58 | # | 引用
yinchao 说：
# 显示暂存区和工作区的差异
$ git diff
这条貌似不对。git diff只显示工作区中产生的差异，而不再显示已add到暂存区的差异。
2016年8月17日 10:48 | # | 引用
yy 说：
阮老师，已经转载在我的博客。方便查看
2016年8月31日 12:01 | # | 引用
ww 说：
# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]
这条应该是: git reset --soft [commit]
2016年9月28日 10:31 | # | 引用
拂山 说：
还有非常非常常用的
冲突的时候，如果想直接用远程的
git checkout --theirs .
git add .
冲突的时候，如果想直接用本地的
git checkout --ours .
git add .
或者使用明确的路径
git checkout --theirs path/to/the/conflicted/file
git add path/to/the/conflicted/file
2016年10月11日 21:13 | # | 引用
helin 说：
git add -u 可以把所有已经在repo的文件的变更标记添加，二不会把临时生成的文件也添加进来。比 git add . 好用
2016年10月16日 17:53 | # | 引用
GsChen 说：
阮老师写的更加清晰易懂
2016年10月20日 16:32 | # | 引用
Mia 说：
谢谢总结！！！！！！！！！！
2016年10月21日 15:05 | # | 引用
二十八画生 说：
文章开始的图片上，只是pull 到 本地工作区？那 本地的repository 怎么更新？
2017年1月20日 11:45 | # | 引用
锅子 说：
最近开始学git，已经过了一遍了GitBook。
这个清单很有用！
2017年2月 8日 14:25 | # | 引用
阿里P8 说：
引用Tony的发言：
想不通那些说 git 超级简单的人, 是一种什么心理!
有一种是装X的心理，还有一种 习惯于命令行模式。 说实话从 svn 转换到git的成本很大，除非工作很闲，否则不要随便迁。
2017年2月27日 11:25 | # | 引用
光光团 说：
那个图画的很好，很好理解
2017年3月22日 09:58 | # | 引用
贺强 说：
阮老师的博文，帮我理解了好多知识点，谢谢啦
2017年5月 2日 20:26 | # | 引用
我要发表看法
您的留言 （HTML标签部分可用）

您的大名：

 «-必填
电子邮件：

 «-必填，不公开
个人网址：

 «-我信任你，不会填写广告链接
记住个人信息？
发表 «- 点击按钮
联系方式 | 2003 - 2017 站长统计